#define _CRT_SECURE_NO_WARNINGS 1 
#include<stdio.h> // EOF(=^Z或F6),NULL
#include<stdlib.h> // srand( ) ,rand( ),exit(n)
#include<malloc.h> // malloc( ),alloc( ),realloc( )等
#include<limits.h> // INT_MAX等
#include<string.h>
#include<ctype.h>
#include<math.h> // floor(),ceil( ),abs( )
#include<iostream> // cout,cin
#include<time.h> // clock( )
#define LENGTH(array) (sizeof(array) / sizeof(array[0]))
#define    TRUE          1
#define     FALSE       0 
#define     OK              1
#define     ERROR      0
#define     INFEASIBLE     -1
#define     OVERFLOW     -2 
typedef      int         Status;
typedef      int   ElemType;
typedef      int   SElemType;
typedef      int   QElemType;
#define  MAXSIZE 100     //最大长度
#define STACK_INIT_SIZE 100 // 存储空间初始分配量
typedef struct    QNode { // 结点类型
    QElemType      data;
    struct QNode* next;
} QNode, * QueuePtr;
typedef struct { // 链队列类型
    QueuePtr  front;  // 队头指针
    QueuePtr  rear;   // 队尾指针
} LinkQueue;
Status InitQueue(LinkQueue& Q)
{//构造一个空队列Q
    Q.front = Q.rear = new QNode; //生成新结点作为头结点
    Q.front->next = NULL;
    return OK;
}
void CreateQueue(LinkQueue& Q)
{//构造一个空队列Q
    Q.front = Q.rear = new QNode; //生成新结点作为头结点
    Q.front->next = NULL;
    int l, e;
    int n = 0;
    printf("输入的队列长度: ");
    scanf("%d",&l);
    while (n < l)
    {   
        n++;
        printf("\n队列中整数型数据元素的值:");
        scanf("%d",&e);
        QNode* p = new QNode;
        p->data = e;
        p->next = NULL;
        Q.rear->next = p;
        Q.rear = p;
    }
    printf("创建完成\n");
};
//（3）将一个数x插到队尾（x在程序运行时随机输入）；
void EnQueue(LinkQueue &Q)
{
    int e;
    printf("输入要插入队尾的元素:");
    scanf("%d",&e);
    QNode* p = new QNode;
    p->data = e;
    p->next = NULL;
    Q.rear->next = p;
    Q.rear = p;
}
//（4）删除队头元素，并在删除结束后输出删除元素的值；
Status DeQueue(LinkQueue& Q) 
{
    int e;
    if (Q.front == Q.rear) return ERROR;     //若队列为空，则返回ERROR
    QNode* p = Q.front->next;                //p指向队头元素
    e = p->data;                             //e保存队头元素的值
    Q.front->next = p->next;                 //修改头结点的指针域
    if (Q.rear == p) Q.rear = Q.front;       //最后一个元素被删，队尾指针指向头结点
    delete p;                                //释放原队头元素的空间
    printf("被删除的元素的值为:%d\n",e);
}
//（5）判定队列是否为空，若不空输出队头元素；
void GetHead(LinkQueue Q)
{// 返回Q的队头元素，不修改队头指针
    if (Q.front != Q.rear)                                        //队列非空
        printf("队头元素是:%d\n", Q.front->next->data);            //返回队头元素的值，队头指针不变
}
void printAllItem(LinkQueue Q)
{
    QNode* p = Q.front->next;
    while (p != Q.rear->next)
    {
        printf("%d ", p->data);
        p = p->next;
    };
    printf("\n");
}
int main() {
    LinkQueue q;
    int n =1;
    while(n)
    {
        printf("（1）初始化一个带头结点的空队列；\n");
        printf("（2）根据随机输入的队列长度和队列中整数型数据元素的值，创建一个非空链队列；\n");
        printf("（3）将一个数x插到队尾（x在程序运行时随机输入）；\n");
        printf("（4）删除队头元素，并在删除结束后输出删除元素的值；\n");
        printf("（5）判定队列是否为空，若不空输出队头元素；\n");
        printf("（6）输出队列中所有元素。\n");
        printf("请选择(输入0退出):");
        scanf("%d", &n);
        switch (n)
        {
            case 1:
            {
            //(1)初始化一个带头结点的空队列；
               InitQueue(q);
               break;
            }
            case 2:
            {
                //（2）根据随机输入的队列长度和队列中整数型数据元素的值，创建一个非空链队列；
                CreateQueue(q);
                break;
            }
            case 3:
            {
                //（3）将一个数x插到队尾（x在程序运行时随机输入）；
                EnQueue(q);
                break;
            }
            case 4:
            {
                //（4）删除队头元素，并在删除结束后输出删除元素的值；
                DeQueue(q);
                break;
            }
            case 5:
            {
                //（5）判定队列是否为空，若不空输出队头元素；
                GetHead(q);
                break;
            }
            case 6:
            {
                //（6）输出队列中所有元素。
                printAllItem(q);
                break;
            }
        }
    }
}
